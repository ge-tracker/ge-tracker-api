'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var moment = require('moment');
var Axios = require('axios');
var merge = require('deepmerge');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
var Axios__default = /*#__PURE__*/_interopDefaultLegacy(Axios);
var merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);

function handleResponseBody(body) {
  if (!body) {
    return null;
  }

  if (!('data' in body)) {
    return body;
  }

  return body.data;
}

/**
 * Returns `true` if an object is empty
 *
 * @param obj
 * @return {boolean}
 */
function isEmptyObject(obj) {
  return Object.keys(obj).length === 0 && obj.constructor === Object;
}
/**
 * Convert options to query string parameters for an endpoint
 *
 * @param url
 * @param opts
 * @return {*}
 */


function parseOptions(url, opts) {
  if (isEmptyObject(opts)) {
    return url;
  }

  var params = toQueryString(opts);
  var sep = url.indexOf('?') === -1 ? '?' : '&';
  return "".concat(url).concat(sep).concat(params);
}
/**
 * Convert an object to query string format
 *
 * @see https://stackoverflow.com/a/31415775/639665
 *
 * @param obj
 * @param urlEncode
 * @returns {string}
 */


function toQueryString(obj, urlEncode) {
  //
  // Helper function that flattens an object, retaining key structer as a path array:
  //
  // Input: { prop1: 'x', prop2: { y: 1, z: 2 } }
  // Example output: [
  //     { path: [ 'prop1' ],      val: 'x' },
  //     { path: [ 'prop2', 'y' ], val: '1' },
  //     { path: [ 'prop2', 'z' ], val: '2' }
  // ]
  //
  function flattenObj(x, path) {
    var result = [];
    path = path || [];
    Object.keys(x).forEach(function (key) {
      if (!x.hasOwnProperty(key)) return;
      var newPath = path.slice();
      newPath.push(key);
      var vals = [];

      if (babelHelpers.typeof(x[key]) == 'object') {
        vals = flattenObj(x[key], newPath);
      } else {
        vals.push({
          path: newPath,
          val: x[key]
        });
      }

      vals.forEach(function (obj) {
        return result.push(obj);
      });
    });
    return result;
  } // flattenObj
  // start with  flattening `obj`


  var parts = flattenObj(obj); // [ { path: [ ...parts ], val: ... }, ... ]
  // convert to array notation:

  parts = parts.map(function (varInfo) {
    if (varInfo.path.length === 1) varInfo.path = varInfo.path[0];else {
      var first = varInfo.path[0];
      var rest = varInfo.path.slice(1);
      varInfo.path = first + '[' + rest.join('][') + ']';
    }
    return varInfo;
  }); // parts.map
  // join the parts to a query-string url-component

  var queryString = parts.map(function (varInfo) {
    return varInfo.path + '=' + varInfo.val;
  }).join('&');
  return urlEncode ? encodeURIComponent(queryString) : queryString;
}

var APIBaseWrapper = /*#__PURE__*/function () {
  function APIBaseWrapper(client, bugsnag) {
    babelHelpers.classCallCheck(this, APIBaseWrapper);
    this.client = client;
    this.bugsnag = bugsnag;
  }

  babelHelpers.createClass(APIBaseWrapper, [{
    key: "_leaveBreadcrumb",
    value: function _leaveBreadcrumb(method, path) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (this.bugsnag && typeof this.bugsnag.leaveBreadcrumb === 'function') {
        var crumb = JSON.stringify(params);
        var urlPath = path.substr(0, 1) === '/' ? path : "/".concat(path);
        var reqName = "".concat(method, " ").concat(urlPath);
        this.bugsnag.leaveBreadcrumb('API Request', {
          type: 'manual',
          url: reqName.substr(0, 140),
          params: crumb.substr(0, 140)
        });
      }
    }
  }, {
    key: "_wrapGet",
    value: function _wrapGet(path) {
      this._leaveBreadcrumb('GET', path);

      return this.client.get(path).then(function (_ref) {
        var data = _ref.data;
        return data;
      }).then(handleResponseBody);
    }
  }, {
    key: "_wrapPost",
    value: function _wrapPost(path) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._leaveBreadcrumb('POST', path, params);

      return this.client.post(path, params).then(function (_ref2) {
        var data = _ref2.data;
        return data;
      });
    }
  }, {
    key: "_wrapPatch",
    value: function _wrapPatch(path) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      this._leaveBreadcrumb('PATCH', path, params);

      return this.client.patch(path, params).then(function (_ref3) {
        var data = _ref3.data;
        return data;
      });
    }
  }, {
    key: "_wrapDelete",
    value: function _wrapDelete(path) {
      this._leaveBreadcrumb('DELETE', path);

      return this.client.delete(path).then(function (_ref4) {
        var data = _ref4.data;
        return data;
      });
    }
    /**
     * Convert options to query string parameters for an endpoint
     *
     * @param url
     * @param opts
     * @return {*}
     */

  }, {
    key: "parseOptions",
    value: function parseOptions$1(url, opts) {
      return parseOptions(url, opts);
    }
  }]);
  return APIBaseWrapper;
}();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var APIUptimeWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(APIUptimeWrapper, _APIBaseWrapper);

  var _super = _createSuper(APIUptimeWrapper);

  function APIUptimeWrapper() {
    babelHelpers.classCallCheck(this, APIUptimeWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(APIUptimeWrapper, [{
    key: "getStatus",
    value: function getStatus() {
      return this._wrapGet('osb-uptime/status');
    }
  }]);
  return APIUptimeWrapper;
}(APIBaseWrapper);

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var AuthWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(AuthWrapper, _APIBaseWrapper);

  var _super = _createSuper$1(AuthWrapper);

  function AuthWrapper() {
    babelHelpers.classCallCheck(this, AuthWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(AuthWrapper, [{
    key: "login",
    value: function login(email, password) {
      return this._wrapPost('auth/login', {
        email: email,
        password: password
      });
    }
  }, {
    key: "login2fa",
    value: function login2fa(email, password, code) {
      return this._wrapPost('auth/2fa', {
        email: email,
        password: password,
        code: code
      });
    }
  }, {
    key: "logout",
    value: function logout() {
      return this._wrapPost('auth/logout');
    }
  }, {
    key: "forgot",
    value: function forgot(email) {
      return this._wrapPost('auth/forgot', {
        email: email
      });
    }
  }, {
    key: "register",
    value: function register(username, email, password, passwordConfirm, terms) {
      var receiveEmail = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      return this._wrapPost('auth/register', {
        name: username,
        email: email,
        password: password,
        password_confirmation: passwordConfirm,
        terms: terms,
        receiveEmail: receiveEmail
      });
    }
  }]);
  return AuthWrapper;
}(APIBaseWrapper);

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var BarrowsRepairWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(BarrowsRepairWrapper, _APIBaseWrapper);

  var _super = _createSuper$2(BarrowsRepairWrapper);

  function BarrowsRepairWrapper() {
    babelHelpers.classCallCheck(this, BarrowsRepairWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(BarrowsRepairWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('barrows-repair');
    }
  }]);
  return BarrowsRepairWrapper;
}(APIBaseWrapper);

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var BillingWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(BillingWrapper, _APIBaseWrapper);

  var _super = _createSuper$3(BillingWrapper);

  function BillingWrapper() {
    babelHelpers.classCallCheck(this, BillingWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(BillingWrapper, [{
    key: "createSession",
    value: function createSession(plan, provider) {
      return this._wrapPost('/billing/sessions', {
        plan: plan,
        provider: provider
      });
    }
  }, {
    key: "updateSession",
    value: function updateSession(sessionId, state) {
      babelHelpers.typeof(state) === 'object' ? state : {
        state: state
      };
      return this._wrapPatch("/billing/sessions/".concat(sessionId), state);
    }
  }, {
    key: "getSession",
    value: function getSession(sessionId) {
      return this._wrapGet("/billing/sessions/".concat(sessionId));
    }
  }]);
  return BillingWrapper;
}(APIBaseWrapper);

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var BlastFurnaceWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(BlastFurnaceWrapper, _APIBaseWrapper);

  var _super = _createSuper$4(BlastFurnaceWrapper);

  function BlastFurnaceWrapper() {
    babelHelpers.classCallCheck(this, BlastFurnaceWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(BlastFurnaceWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('blast-furnace');
    }
  }]);
  return BlastFurnaceWrapper;
}(APIBaseWrapper);

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var CombinationItemsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(CombinationItemsWrapper, _APIBaseWrapper);

  var _super = _createSuper$5(CombinationItemsWrapper);

  function CombinationItemsWrapper() {
    babelHelpers.classCallCheck(this, CombinationItemsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(CombinationItemsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('combination-items', opts));
    }
  }]);
  return CombinationItemsWrapper;
}(APIBaseWrapper);

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DashboardWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(DashboardWrapper, _APIBaseWrapper);

  var _super = _createSuper$6(DashboardWrapper);

  function DashboardWrapper() {
    babelHelpers.classCallCheck(this, DashboardWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(DashboardWrapper, [{
    key: "getDashboard",
    value: function getDashboard() {
      return this._wrapGet('/dashboard');
    }
  }]);
  return DashboardWrapper;
}(APIBaseWrapper);

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DecantPotionsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(DecantPotionsWrapper, _APIBaseWrapper);

  var _super = _createSuper$7(DecantPotionsWrapper);

  function DecantPotionsWrapper() {
    babelHelpers.classCallCheck(this, DecantPotionsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(DecantPotionsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('decant-potions', opts));
    }
  }]);
  return DecantPotionsWrapper;
}(APIBaseWrapper);

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var DeviceWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(DeviceWrapper, _APIBaseWrapper);

  var _super = _createSuper$8(DeviceWrapper);

  function DeviceWrapper() {
    babelHelpers.classCallCheck(this, DeviceWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(DeviceWrapper, [{
    key: "register",

    /**
     * Register Device to a User
     *
     * Required fields:
     *      - platform
     *      - platformVersion
     *      - width
     *      - height
     *      - uniqueId
     *      - appVersion
     *
     * Optional fields:
     *
     *      - pushInfo.pushToken
     *      - pushInfo.userId
     *
     * @param platform
     * @param platformVersion
     * @param width
     * @param height
     * @param uniqueId
     * @param appVersion
     * @param pushInfo
     * @return {*}
     */
    value: function register(_ref) {
      var platform = _ref.platform,
          platformVersion = _ref.platformVersion,
          width = _ref.width,
          height = _ref.height,
          uniqueId = _ref.uniqueId,
          appVersion = _ref.appVersion,
          pushInfo = _ref.pushInfo;
      return this._wrapPost('devices/register', {
        platform: platform,
        platformVersion: platformVersion,
        width: width,
        height: height,
        uniqueId: uniqueId,
        appVersion: appVersion,
        pushInfo: pushInfo
      });
    }
  }]);
  return DeviceWrapper;
}(APIBaseWrapper);

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var FavouriteItemsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(FavouriteItemsWrapper, _APIBaseWrapper);

  var _super = _createSuper$9(FavouriteItemsWrapper);

  function FavouriteItemsWrapper() {
    babelHelpers.classCallCheck(this, FavouriteItemsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(FavouriteItemsWrapper, [{
    key: "addItem",
    value: function addItem(itemId) {
      return this._wrapPost("favourite-items", {
        item_id: itemId
      });
    }
  }, {
    key: "deleteItem",
    value: function deleteItem(favouriteItemsId) {
      return this._wrapDelete("favourite-items/".concat(favouriteItemsId));
    }
  }, {
    key: "deleteItemByItemId",
    value: function deleteItemByItemId(itemId) {
      return this._wrapDelete("favourite-items/itemId/".concat(itemId));
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('favourite-items', opts));
    }
    /**
     * Update favourite items sort order
     *
     * @param update
     * @returns {*}
     */

  }, {
    key: "reorder",
    value: function reorder(update) {
      return this._wrapPost('favourite-items/reorder', {
        update: update
      });
    }
  }]);
  return FavouriteItemsWrapper;
}(APIBaseWrapper);

function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var GELimitsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(GELimitsWrapper, _APIBaseWrapper);

  var _super = _createSuper$a(GELimitsWrapper);

  function GELimitsWrapper() {
    babelHelpers.classCallCheck(this, GELimitsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(GELimitsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('ge-limits', opts));
    }
  }]);
  return GELimitsWrapper;
}(APIBaseWrapper);

function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var GraphWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(GraphWrapper, _APIBaseWrapper);

  var _super = _createSuper$b(GraphWrapper);

  function GraphWrapper() {
    babelHelpers.classCallCheck(this, GraphWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(GraphWrapper, [{
    key: "_wrapGet",
    value: function _wrapGet(path) {
      return this.client.get(path).then(handleResponseBody);
    }
  }, {
    key: "getDuration",
    value: function getDuration(duration, itemId) {
      var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var url = "graph/".concat(itemId, "/").concat(duration);

      if (source !== null) {
        url = url + '?source=' + source;
      }

      return this._wrapGet(url);
    }
  }, {
    key: "getDay",
    value: function getDay(itemId) {
      var tenMinute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (tenMinute) {
        var dateFormat = 'Y-MM-DD';
        var date = moment__default['default']().format(dateFormat);
        var startDate = params.hasOwnProperty('start') ? moment__default['default'](params.start).format(dateFormat) : date;
        var endDate = params.hasOwnProperty('end') ? moment__default['default'](params.end).format(dateFormat) : date;
        var url = "graph/".concat(itemId, "/day?day=10&duration[start]=").concat(startDate, "&duration[end]=").concat(endDate);

        if (params.hasOwnProperty('source') && params.source !== null) {
          url = url + '&source=' + params.source;
        }

        return this._wrapGet(url);
      } else {
        var source = params.hasOwnProperty('source') && params.source !== null ? params.source : null;
        return this.getDuration('day', itemId, source);
      }
    }
  }, {
    key: "getWeek",
    value: function getWeek(itemId) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.getDuration('week', itemId, source);
    }
  }, {
    key: "getMonth",
    value: function getMonth(itemId) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.getDuration('month', itemId, source);
    }
  }, {
    key: "getQuarter",
    value: function getQuarter(itemId) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.getDuration('quarter', itemId, source);
    }
  }, {
    key: "getYear",
    value: function getYear(itemId) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return this.getDuration('year', itemId, source);
    }
  }, {
    key: "getCandlestick",
    value: function getCandlestick(duration, itemId) {
      return this._wrapGet("graph/candlestick/".concat(itemId, "/").concat(duration));
    }
  }, {
    key: "forceReload",
    value: function forceReload(duration, itemId) {
      return this._wrapPost("graph/force-reload", {
        itemId: itemId,
        duration: duration
      });
    }
  }]);
  return GraphWrapper;
}(APIBaseWrapper);

function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var HeartbeatWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(HeartbeatWrapper, _APIBaseWrapper);

  var _super = _createSuper$c(HeartbeatWrapper);

  function HeartbeatWrapper() {
    babelHelpers.classCallCheck(this, HeartbeatWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(HeartbeatWrapper, [{
    key: "getHeartbeat",
    value: function getHeartbeat() {
      return this._wrapGet('heartbeat');
    }
  }]);
  return HeartbeatWrapper;
}(APIBaseWrapper);

function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var HerbloreWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(HerbloreWrapper, _APIBaseWrapper);

  var _super = _createSuper$d(HerbloreWrapper);

  function HerbloreWrapper() {
    babelHelpers.classCallCheck(this, HerbloreWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(HerbloreWrapper, [{
    key: "getCleanHerbs",
    value: function getCleanHerbs() {
      return this._wrapGet('herblore/clean-herbs');
    }
  }, {
    key: "getMakePotions",
    value: function getMakePotions() {
      return this._wrapGet('herblore/make-potions');
    }
  }, {
    key: "getUnfinishedPotions",
    value: function getUnfinishedPotions() {
      return this._wrapGet('herblore/unfinished-potions');
    }
  }]);
  return HerbloreWrapper;
}(APIBaseWrapper);

function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var HighAlchemyWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(HighAlchemyWrapper, _APIBaseWrapper);

  var _super = _createSuper$e(HighAlchemyWrapper);

  function HighAlchemyWrapper() {
    babelHelpers.classCallCheck(this, HighAlchemyWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(HighAlchemyWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('high-alchemy', opts));
    }
  }]);
  return HighAlchemyWrapper;
}(APIBaseWrapper);

function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$f() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var HighVolumeWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(HighVolumeWrapper, _APIBaseWrapper);

  var _super = _createSuper$f(HighVolumeWrapper);

  function HighVolumeWrapper() {
    babelHelpers.classCallCheck(this, HighVolumeWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(HighVolumeWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('high-volume', opts));
    }
  }]);
  return HighVolumeWrapper;
}(APIBaseWrapper);

function _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var HighestMarginsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(HighestMarginsWrapper, _APIBaseWrapper);

  var _super = _createSuper$g(HighestMarginsWrapper);

  function HighestMarginsWrapper() {
    babelHelpers.classCallCheck(this, HighestMarginsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(HighestMarginsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('highest-margins', opts));
    }
  }]);
  return HighestMarginsWrapper;
}(APIBaseWrapper);

function _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$h() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ItemSetsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(ItemSetsWrapper, _APIBaseWrapper);

  var _super = _createSuper$h(ItemSetsWrapper);

  function ItemSetsWrapper() {
    babelHelpers.classCallCheck(this, ItemSetsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(ItemSetsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('item-sets', opts));
    }
  }]);
  return ItemSetsWrapper;
}(APIBaseWrapper);

function _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$i() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ItemsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(ItemsWrapper, _APIBaseWrapper);

  var _super = _createSuper$i(ItemsWrapper);

  function ItemsWrapper() {
    babelHelpers.classCallCheck(this, ItemsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(ItemsWrapper, [{
    key: "getAllItems",
    value: function getAllItems() {
      return this._wrapGet('items');
    }
  }, {
    key: "getItem",
    value: function getItem(itemId) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var url = !detail ? "items/".concat(itemId) : "items/".concat(itemId, "?detail=true");
      return this._wrapGet(url);
    }
  }, {
    key: "getItems",
    value: function getItems() {
      for (var _len = arguments.length, itemIds = new Array(_len), _key = 0; _key < _len; _key++) {
        itemIds[_key] = arguments[_key];
      }

      return this._wrapGet("items/multi/".concat(itemIds.join(',')));
    }
  }, {
    key: "search",
    value: function search(query) {
      return this._wrapGet("items/search/".concat(query));
    }
  }]);
  return ItemsWrapper;
}(APIBaseWrapper);

function _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$j() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var LeaderboardWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(LeaderboardWrapper, _APIBaseWrapper);

  var _super = _createSuper$j(LeaderboardWrapper);

  function LeaderboardWrapper() {
    babelHelpers.classCallCheck(this, LeaderboardWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(LeaderboardWrapper, [{
    key: "getLeaderboard",
    value: function getLeaderboard(slug) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.client.get(this.parseOptions("leaderboard/".concat(slug), opts)).then(function (_ref) {
        var data = _ref.data;
        return data;
      });
    }
  }, {
    key: "getRank",
    value: function getRank(slug) {
      return this._wrapGet("leaderboard/rank/".concat(slug));
    }
  }, {
    key: "getSummary",
    value: function getSummary() {
      return this._wrapGet('leaderboard');
    }
  }]);
  return LeaderboardWrapper;
}(APIBaseWrapper);

function _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$k() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var MagicTabletsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(MagicTabletsWrapper, _APIBaseWrapper);

  var _super = _createSuper$k(MagicTabletsWrapper);

  function MagicTabletsWrapper() {
    babelHelpers.classCallCheck(this, MagicTabletsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(MagicTabletsWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('magic-tablets');
    }
  }]);
  return MagicTabletsWrapper;
}(APIBaseWrapper);

function _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$l() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var MarketWatchWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(MarketWatchWrapper, _APIBaseWrapper);

  var _super = _createSuper$l(MarketWatchWrapper);

  function MarketWatchWrapper() {
    babelHelpers.classCallCheck(this, MarketWatchWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(MarketWatchWrapper, [{
    key: "getIndex",
    value: function getIndex(indexId) {
      return this._wrapGet("market-watch/".concat(indexId));
    }
  }, {
    key: "getSummary",
    value: function getSummary() {
      return this._wrapGet('market-watch');
    }
  }]);
  return MarketWatchWrapper;
}(APIBaseWrapper);

function _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$m() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var NewItemsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(NewItemsWrapper, _APIBaseWrapper);

  var _super = _createSuper$m(NewItemsWrapper);

  function NewItemsWrapper() {
    babelHelpers.classCallCheck(this, NewItemsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(NewItemsWrapper, [{
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('new-items', opts));
    }
  }]);
  return NewItemsWrapper;
}(APIBaseWrapper);

function _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$n() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var NotificationsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(NotificationsWrapper, _APIBaseWrapper);

  var _super = _createSuper$n(NotificationsWrapper);

  function NotificationsWrapper() {
    babelHelpers.classCallCheck(this, NotificationsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(NotificationsWrapper, [{
    key: "getNotifications",
    value: function getNotifications() {
      return this._wrapGet('notifications');
    }
  }, {
    key: "getNotification",
    value: function getNotification(notificationId) {
      return this._wrapGet("notifications/".concat(notificationId));
    }
  }, {
    key: "markAllAsRead",
    value: function markAllAsRead() {
      return this._wrapPost("notifications/mark-read");
    }
  }]);
  return NotificationsWrapper;
}(APIBaseWrapper);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$o(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$o(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$o() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var PriceAlertWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(PriceAlertWrapper, _APIBaseWrapper);

  var _super = _createSuper$o(PriceAlertWrapper);

  function PriceAlertWrapper() {
    babelHelpers.classCallCheck(this, PriceAlertWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(PriceAlertWrapper, [{
    key: "getAlerts",

    /**
     * Get Price Alerts
     *
     * `itemId` can be specified to load price alerts for a single item
     *
     * @param {Number} itemId
     * @return {*}
     */
    value: function getAlerts() {
      var itemId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var url = itemId ? "/price-alerts/".concat(itemId) : '/price-alerts';
      return this._wrapGet(url);
    }
    /**
     * Create Price Alert
     *
     * `field` should be one of: [current, selling, buying, profit]
     * `type` should be one of: [above, below]
     * (optional) `methods` should be an object in the format: `{sms: true, email: true}`
     *
     * @param {Number} itemId
     * @param {String} field
     * @param {String} type
     * @param {Number} price
     * @param {Object} methods
     * @param {Number} maxTriggers
     * @return {*}
     */

  }, {
    key: "createAlert",
    value: function createAlert(itemId, field, type, price) {
      var methods = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
      var maxTriggers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;
      return this._wrapPost('/price-alerts', {
        itemId: itemId,
        field: field,
        type: type,
        price: price,
        methods: methods,
        maxTriggers: maxTriggers
      });
    }
  }, {
    key: "updateAlert",
    value: function updateAlert(id) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this._wrapPost("/price-alerts/".concat(id), _objectSpread({
        status: status
      }, params));
    }
  }, {
    key: "deleteAlert",
    value: function deleteAlert(id) {
      return this._wrapDelete("/price-alerts/".concat(id));
    }
  }]);
  return PriceAlertWrapper;
}(APIBaseWrapper);

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper$p(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$p(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$p() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var ProfitTrackerWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(ProfitTrackerWrapper, _APIBaseWrapper);

  var _super = _createSuper$p(ProfitTrackerWrapper);

  function ProfitTrackerWrapper() {
    babelHelpers.classCallCheck(this, ProfitTrackerWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(ProfitTrackerWrapper, [{
    key: "getTransactions",
    value: function getTransactions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('/profit-tracker', opts)).then(function (_ref) {
        var data = _ref.data;
        return data;
      });
    }
  }, {
    key: "getTransaction",
    value: function getTransaction(id) {
      return this._wrapGet("/profit-tracker/".concat(id));
    }
  }, {
    key: "createTransaction",
    value: function createTransaction(itemId, qty, buyPrice) {
      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      return this._wrapPost('/profit-tracker', _objectSpread$1({
        item_id: itemId,
        qty: qty,
        buy_price: buyPrice
      }, params));
    }
  }, {
    key: "updateTransaction",
    value: function updateTransaction(id, status) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._wrapPost("/profit-tracker/".concat(id), _objectSpread$1({
        status: status
      }, params));
    }
  }, {
    key: "deleteTransaction",
    value: function deleteTransaction(id) {
      return this._wrapDelete("/profit-tracker/".concat(id));
    }
  }, {
    key: "getBuyingTransactions",
    value: function getBuyingTransactions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('/profit-tracker/buying', opts)).then(function (_ref2) {
        var data = _ref2.data;
        return data;
      });
    }
  }, {
    key: "getBoughtTransactions",
    value: function getBoughtTransactions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('/profit-tracker/bought', opts)).then(function (_ref3) {
        var data = _ref3.data;
        return data;
      });
    }
  }, {
    key: "getSellingTransactions",
    value: function getSellingTransactions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('/profit-tracker/selling', opts)).then(function (_ref4) {
        var data = _ref4.data;
        return data;
      });
    }
  }, {
    key: "getSoldTransactions",
    value: function getSoldTransactions() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('/profit-tracker/sold', opts)).then(function (_ref5) {
        var data = _ref5.data;
        return data;
      });
    }
  }, {
    key: "getActiveTransactions",
    value: function getActiveTransactions() {
      return this._wrapGet('/profit-tracker/active-transactions');
    }
  }, {
    key: "getPreviousTransactions",
    value: function getPreviousTransactions(itemId) {
      return this._wrapGet("/profit-tracker/previous-transactions/".concat(itemId));
    }
  }, {
    key: "getSummary",
    value: function getSummary() {
      return this._wrapGet('/profit-tracker/summary');
    }
  }, {
    key: "getMostProfitable",
    value: function getMostProfitable() {
      return this._wrapGet('/profit-tracker/most-profitable');
    }
  }, {
    key: "clear",
    value: function clear() {
      return this._wrapPost('/profit-tracker/clear');
    }
  }]);
  return ProfitTrackerWrapper;
}(APIBaseWrapper);

function _createSuper$q(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$q(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$q() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var PlankMakingWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(PlankMakingWrapper, _APIBaseWrapper);

  var _super = _createSuper$q(PlankMakingWrapper);

  function PlankMakingWrapper() {
    babelHelpers.classCallCheck(this, PlankMakingWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(PlankMakingWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('plank-making');
    }
  }]);
  return PlankMakingWrapper;
}(APIBaseWrapper);

function _createSuper$r(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$r(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$r() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var RSUpdatesWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(RSUpdatesWrapper, _APIBaseWrapper);

  var _super = _createSuper$r(RSUpdatesWrapper);

  function RSUpdatesWrapper() {
    babelHelpers.classCallCheck(this, RSUpdatesWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(RSUpdatesWrapper, [{
    key: "get",
    value: function get() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.client.get(this.parseOptions('rs-updates', opts)).then(function (_ref) {
        var data = _ref.data;
        return data;
      });
    }
  }, {
    key: "getUpdate",
    value: function getUpdate(id) {
      return this._wrapGet("rs-updates/".concat(id));
    }
  }]);
  return RSUpdatesWrapper;
}(APIBaseWrapper);

function _createSuper$s(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$s(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$s() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var StatsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(StatsWrapper, _APIBaseWrapper);

  var _super = _createSuper$s(StatsWrapper);

  function StatsWrapper() {
    babelHelpers.classCallCheck(this, StatsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(StatsWrapper, [{
    key: "getGlobalStats",
    value: function getGlobalStats() {
      return this._wrapGet('stats');
    }
  }, {
    key: "getOnlineUsers",
    value: function getOnlineUsers() {
      return this._wrapGet('stats/online');
    }
  }]);
  return StatsWrapper;
}(APIBaseWrapper);

function _createSuper$t(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$t(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$t() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var StoreProfitWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(StoreProfitWrapper, _APIBaseWrapper);

  var _super = _createSuper$t(StoreProfitWrapper);

  function StoreProfitWrapper() {
    babelHelpers.classCallCheck(this, StoreProfitWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(StoreProfitWrapper, [{
    key: "getStores",
    value: function getStores() {
      return this._wrapGet('stores');
    }
  }, {
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('stores/profit');
    }
  }]);
  return StoreProfitWrapper;
}(APIBaseWrapper);

function _createSuper$u(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$u(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$u() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var SubscriptionsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(SubscriptionsWrapper, _APIBaseWrapper);

  var _super = _createSuper$u(SubscriptionsWrapper);

  function SubscriptionsWrapper() {
    babelHelpers.classCallCheck(this, SubscriptionsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(SubscriptionsWrapper, [{
    key: "getSubscription",
    value: function getSubscription(subscriptionId) {
      return this._wrapGet("/subscriptions/".concat(subscriptionId));
    }
  }, {
    key: "getUserSubscriptions",
    value: function getUserSubscriptions(userId) {
      return this._wrapGet("/subscriptions/user/".concat(userId));
    }
  }, {
    key: "terminateSubscription",
    value: function terminateSubscription(subscriptionId) {
      return this._wrapDelete("/subscriptions/".concat(subscriptionId));
    }
  }, {
    key: "refundSubscription",
    value: function refundSubscription(subscriptionId, amount) {
      return this._wrapPost("/subscriptions/".concat(subscriptionId, "/refund"), {
        amount: amount
      });
    }
  }, {
    key: "createSubscription",
    value: function createSubscription(transactionReceipt, platform) {
      var sessionId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return this._wrapPost('/subscriptions', {
        transactionReceipt: transactionReceipt,
        platform: platform,
        sessionId: sessionId
      });
    }
  }]);
  return SubscriptionsWrapper;
}(APIBaseWrapper);

function _createSuper$v(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$v(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$v() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var SuggestedItemsWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(SuggestedItemsWrapper, _APIBaseWrapper);

  var _super = _createSuper$v(SuggestedItemsWrapper);

  function SuggestedItemsWrapper() {
    babelHelpers.classCallCheck(this, SuggestedItemsWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(SuggestedItemsWrapper, [{
    key: "refresh",
    value: function refresh() {
      return this._wrapGet('suggested-items/refresh');
    }
  }, {
    key: "getItems",
    value: function getItems() {
      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        filters: false
      };
      return this._wrapGet(this.parseOptions('suggested-items', opts));
    }
  }]);
  return SuggestedItemsWrapper;
}(APIBaseWrapper);

function _createSuper$w(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$w(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$w() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var TanLeatherWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(TanLeatherWrapper, _APIBaseWrapper);

  var _super = _createSuper$w(TanLeatherWrapper);

  function TanLeatherWrapper() {
    babelHelpers.classCallCheck(this, TanLeatherWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(TanLeatherWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('tan-leather');
    }
  }]);
  return TanLeatherWrapper;
}(APIBaseWrapper);

function _createSuper$x(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$x(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$x() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var TreeSaplingWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(TreeSaplingWrapper, _APIBaseWrapper);

  var _super = _createSuper$x(TreeSaplingWrapper);

  function TreeSaplingWrapper() {
    babelHelpers.classCallCheck(this, TreeSaplingWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(TreeSaplingWrapper, [{
    key: "getItems",
    value: function getItems() {
      return this._wrapGet('tree-sapling');
    }
  }]);
  return TreeSaplingWrapper;
}(APIBaseWrapper);

function _createSuper$y(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$y(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$y() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var UserWrapper = /*#__PURE__*/function (_APIBaseWrapper) {
  babelHelpers.inherits(UserWrapper, _APIBaseWrapper);

  var _super = _createSuper$y(UserWrapper);

  function UserWrapper() {
    babelHelpers.classCallCheck(this, UserWrapper);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(UserWrapper, [{
    key: "getById",
    value: function getById(userId) {
      return this._wrapGet("users/".concat(userId));
    }
  }, {
    key: "search",
    value: function search(query) {
      return this._wrapPost("users/search", {
        query: query
      });
    }
  }, {
    key: "getAuthenticateUser",
    value: function getAuthenticateUser() {
      return this._wrapGet('users/me');
    }
  }]);
  return UserWrapper;
}(APIBaseWrapper);

var createApi = function createApi(client) {
  var bugsnag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return {
    APIUptime: new APIUptimeWrapper(client, bugsnag),
    Auth: new AuthWrapper(client, bugsnag),
    BarrowsRepair: new BarrowsRepairWrapper(client, bugsnag),
    Billing: new BillingWrapper(client, bugsnag),
    BlastFurnace: new BlastFurnaceWrapper(client, bugsnag),
    CombinationItems: new CombinationItemsWrapper(client, bugsnag),
    Dashboard: new DashboardWrapper(client, bugsnag),
    DecantPotions: new DecantPotionsWrapper(client, bugsnag),
    Device: new DeviceWrapper(client, bugsnag),
    FavouriteItems: new FavouriteItemsWrapper(client, bugsnag),
    GELimits: new GELimitsWrapper(client, bugsnag),
    Graphs: new GraphWrapper(client, bugsnag),
    Heartbeat: new HeartbeatWrapper(client, bugsnag),
    Herblore: new HerbloreWrapper(client, bugsnag),
    HighAlchemy: new HighAlchemyWrapper(client, bugsnag),
    HighVolume: new HighVolumeWrapper(client, bugsnag),
    HighestMargins: new HighestMarginsWrapper(client, bugsnag),
    ItemSets: new ItemSetsWrapper(client, bugsnag),
    Items: new ItemsWrapper(client, bugsnag),
    Leaderboard: new LeaderboardWrapper(client, bugsnag),
    MagicTablets: new MagicTabletsWrapper(client, bugsnag),
    MarketWatch: new MarketWatchWrapper(client, bugsnag),
    NewItems: new NewItemsWrapper(client, bugsnag),
    Notifications: new NotificationsWrapper(client, bugsnag),
    PriceAlert: new PriceAlertWrapper(client, bugsnag),
    ProfitTracker: new ProfitTrackerWrapper(client, bugsnag),
    PlankMaking: new PlankMakingWrapper(client, bugsnag),
    RSUpdates: new RSUpdatesWrapper(client, bugsnag),
    Stats: new StatsWrapper(client, bugsnag),
    StoreProfit: new StoreProfitWrapper(client, bugsnag),
    Subscriptions: new SubscriptionsWrapper(client, bugsnag),
    SuggestedItems: new SuggestedItemsWrapper(client, bugsnag),
    TanLeather: new TanLeatherWrapper(client, bugsnag),
    TreeSapling: new TreeSaplingWrapper(client, bugsnag),
    Users: new UserWrapper(client, bugsnag),

    /**
     * Get GT App Manifest JSON
     *
     * @param url
     * @return {Promise<any>}
     */
    getManifest: function getManifest() {
      var apiUrl = client.defaults.baseURL.replace('/api', '');
      return new Promise(function (resolve, reject) {
        client.get("".concat(apiUrl, "app_manifest.json")).then(function (data) {
          if (data.hasOwnProperty('data')) {
            resolve(data.data);
          } else {
            reject(null);
          }
        }).catch(function (err) {
          return reject(err);
        });
      });
    },

    /**
     * Get underlying Axios client instance
     *
     * @returns {AxiosStatic}
     */
    getClient: function getClient() {
      return client;
    }
  };
};

function _createSuper$z(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$z(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$z() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function captureStackTrace(targetObject) {
  var constructorOpt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(targetObject, constructorOpt);
  }
}

var InvalidApiKey = /*#__PURE__*/function (_Error) {
  babelHelpers.inherits(InvalidApiKey, _Error);

  var _super = _createSuper$z(InvalidApiKey);

  function InvalidApiKey() {
    var _this;

    babelHelpers.classCallCheck(this, InvalidApiKey);
    _this = _super.call(this, 'Specified API key was missing or invalid');
    captureStackTrace(babelHelpers.assertThisInitialized(_this), InvalidApiKey);
    return _this;
  }

  return InvalidApiKey;
}( /*#__PURE__*/babelHelpers.wrapNativeSuper(Error));

var GE_TRACKER_API_URL = 'https://www.ge-tracker.com/api';
var GE_TRACKER_API_VERSION = 'v2';
var DefaultOptions = {
  // set the base URL for all API calls made on this Axios instance
  baseURL: GE_TRACKER_API_URL,
  // set a sane default for the request TTL
  timeout: 30e3,
  // disable redirects -- API should NOT return a redirect response
  maxRedirects: 0,
  // explicitly set the default response type to JSON
  responseType: 'json',
  // specify a custom user-agent header to identify the client used
  // and for a point of contact
  headers: {
    'User-Agent': 'ge-tracker-api client <https://github.com/gtjamesa/ge-tracker-api>',
    'Accept': "application/x.getracker.".concat(GE_TRACKER_API_VERSION, "+json")
  }
};

function isUnauthorizedResponse(error) {
  return error.response && error.response.status === 401;
}

function createAuthHeader(apiKey) {
  return {
    // Authorization header is required with a valid API key for all API calls
    Authorization: "Bearer ".concat(apiKey)
  };
}

function createClient(apiKey) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var options = merge__default['default'](DefaultOptions, opts || {});
  var instance = Axios__default['default'].create(merge__default['default'](options, {
    headers: createAuthHeader(apiKey)
  })); // add custom response interceptors

  instance.interceptors.response.use(function (response) {
    return response;
  }, function (error) {
    // intercept 401 Unauthorized responses and reject the promise chain with
    // an appropriate typed error
    if (isUnauthorizedResponse(error)) {
      return Promise.reject(new InvalidApiKey());
    }

    return Promise.reject(error);
  });
  return instance;
}

function getApiKeyFromEnv() {
  return process.env.GE_TRACKER_API_KEY;
}

var createInstance = function createInstance(apiKey) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var bugsnag = opts.hasOwnProperty('bugsnag') ? opts.bugsnag : null;
  return createApi(createClient(apiKey, opts), bugsnag);
};

var createClient$1 = function createClient(apiKey) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return createInstance(apiKey, opts);
};

var createClientFromEnv = function createClientFromEnv() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return createInstance(getApiKeyFromEnv(), opts);
};

exports.createClient = createClient$1;
exports.createClientFromEnv = createClientFromEnv;

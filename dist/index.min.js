'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var moment = _interopDefault(require('moment'));
var Axios = _interopDefault(require('axios'));
var merge = _interopDefault(require('deepmerge'));

function handleResponseBody(body) {
    if (!body) {
        return null;
    }

    if (!('data' in body)) {
        return body;
    }

    return body.data;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

/**
 * Returns `true` if an object is empty
 *
 * @param obj
 * @return {boolean}
 */
function isEmptyObject(obj) {
    return Object.keys(obj).length === 0 && obj.constructor === Object;
}

/**
 * Convert options to query string parameters for an endpoint
 *
 * @param url
 * @param opts
 * @return {*}
 */
function parseOptions(url, opts) {
    if (isEmptyObject(opts)) {
        return url;
    }

    var params = toQueryString(opts);
    var sep = url.indexOf('?') === -1 ? '?' : '&';

    return '' + url + sep + params;
}

/**
 * Convert an object to query string format
 *
 * @see https://stackoverflow.com/a/31415775/639665
 *
 * @param obj
 * @param urlEncode
 * @returns {string}
 */
function toQueryString(obj, urlEncode) {
    //
    // Helper function that flattens an object, retaining key structer as a path array:
    //
    // Input: { prop1: 'x', prop2: { y: 1, z: 2 } }
    // Example output: [
    //     { path: [ 'prop1' ],      val: 'x' },
    //     { path: [ 'prop2', 'y' ], val: '1' },
    //     { path: [ 'prop2', 'z' ], val: '2' }
    // ]
    //
    function flattenObj(x, path) {
        var result = [];

        path = path || [];
        Object.keys(x).forEach(function (key) {
            if (!x.hasOwnProperty(key)) return;

            var newPath = path.slice();
            newPath.push(key);

            var vals = [];
            if (_typeof(x[key]) == 'object') {
                vals = flattenObj(x[key], newPath);
            } else {
                vals.push({ path: newPath, val: x[key] });
            }
            vals.forEach(function (obj) {
                return result.push(obj);
            });
        });

        return result;
    } // flattenObj

    // start with  flattening `obj`
    var parts = flattenObj(obj); // [ { path: [ ...parts ], val: ... }, ... ]

    // convert to array notation:
    parts = parts.map(function (varInfo) {
        if (varInfo.path.length === 1) varInfo.path = varInfo.path[0];else {
            var first = varInfo.path[0];
            var rest = varInfo.path.slice(1);
            varInfo.path = first + '[' + rest.join('][') + ']';
        }
        return varInfo;
    }); // parts.map

    // join the parts to a query-string url-component
    var queryString = parts.map(function (varInfo) {
        return varInfo.path + '=' + varInfo.val;
    }).join('&');

    return urlEncode ? encodeURIComponent(queryString) : queryString;
}

var APIBaseWrapper = function () {
    function APIBaseWrapper(client, bugsnag) {
        classCallCheck(this, APIBaseWrapper);

        this.client = client;
        this.bugsnag = bugsnag;
    }

    createClass(APIBaseWrapper, [{
        key: "_leaveBreadcrumb",
        value: function _leaveBreadcrumb(method, path) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            if (this.bugsnag && typeof this.bugsnag.leaveBreadcrumb === 'function') {
                var crumb = JSON.stringify(params);
                var urlPath = path.substr(0, 1) === '/' ? path : "/" + path;
                var reqName = method + " " + urlPath;

                this.bugsnag.leaveBreadcrumb('API Request', {
                    type: 'manual',
                    url: reqName.substr(0, 140),
                    params: crumb.substr(0, 140)
                });
            }
        }
    }, {
        key: "_wrapGet",
        value: function _wrapGet(path) {
            this._leaveBreadcrumb('GET', path);

            return this.client.get(path).then(function (_ref) {
                var data = _ref.data;
                return data;
            }).then(handleResponseBody);
        }
    }, {
        key: "_wrapPost",
        value: function _wrapPost(path) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            this._leaveBreadcrumb('POST', path, params);

            return this.client.post(path, params).then(function (_ref2) {
                var data = _ref2.data;
                return data;
            });
        }
    }, {
        key: "_wrapDelete",
        value: function _wrapDelete(path) {
            this._leaveBreadcrumb('DELETE', path);

            return this.client.delete(path).then(function (_ref3) {
                var data = _ref3.data;
                return data;
            });
        }

        /**
         * Convert options to query string parameters for an endpoint
         *
         * @param url
         * @param opts
         * @return {*}
         */

    }, {
        key: "parseOptions",
        value: function parseOptions$$1(url, opts) {
            return parseOptions(url, opts);
        }
    }]);
    return APIBaseWrapper;
}();

var APIUptimeWrapper = function (_APIBaseWrapper) {
    inherits(APIUptimeWrapper, _APIBaseWrapper);

    function APIUptimeWrapper() {
        classCallCheck(this, APIUptimeWrapper);
        return possibleConstructorReturn(this, (APIUptimeWrapper.__proto__ || Object.getPrototypeOf(APIUptimeWrapper)).apply(this, arguments));
    }

    createClass(APIUptimeWrapper, [{
        key: 'getStatus',
        value: function getStatus() {
            return this._wrapGet('osb-uptime/status');
        }
    }]);
    return APIUptimeWrapper;
}(APIBaseWrapper);

var AuthWrapper = function (_APIBaseWrapper) {
    inherits(AuthWrapper, _APIBaseWrapper);

    function AuthWrapper() {
        classCallCheck(this, AuthWrapper);
        return possibleConstructorReturn(this, (AuthWrapper.__proto__ || Object.getPrototypeOf(AuthWrapper)).apply(this, arguments));
    }

    createClass(AuthWrapper, [{
        key: 'login',
        value: function login(email, password) {
            return this._wrapPost('auth/login', {
                email: email,
                password: password
            });
        }
    }, {
        key: 'login2fa',
        value: function login2fa(email, password, code) {
            return this._wrapPost('auth/2fa', {
                email: email,
                password: password,
                code: code
            });
        }
    }, {
        key: 'logout',
        value: function logout() {
            return this._wrapPost('auth/logout');
        }
    }, {
        key: 'forgot',
        value: function forgot(email) {
            return this._wrapPost('auth/forgot', {
                email: email
            });
        }
    }, {
        key: 'register',
        value: function register(username, email, password, passwordConfirm, terms) {
            var receiveEmail = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

            return this._wrapPost('auth/register', {
                name: username,
                email: email,
                password: password,
                password_confirmation: passwordConfirm,
                terms: terms,
                receiveEmail: receiveEmail
            });
        }
    }]);
    return AuthWrapper;
}(APIBaseWrapper);

var BarrowsRepairWrapper = function (_APIBaseWrapper) {
    inherits(BarrowsRepairWrapper, _APIBaseWrapper);

    function BarrowsRepairWrapper() {
        classCallCheck(this, BarrowsRepairWrapper);
        return possibleConstructorReturn(this, (BarrowsRepairWrapper.__proto__ || Object.getPrototypeOf(BarrowsRepairWrapper)).apply(this, arguments));
    }

    createClass(BarrowsRepairWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('barrows-repair');
        }
    }]);
    return BarrowsRepairWrapper;
}(APIBaseWrapper);

var BillingWrapper = function (_APIBaseWrapper) {
    inherits(BillingWrapper, _APIBaseWrapper);

    function BillingWrapper() {
        classCallCheck(this, BillingWrapper);
        return possibleConstructorReturn(this, (BillingWrapper.__proto__ || Object.getPrototypeOf(BillingWrapper)).apply(this, arguments));
    }

    createClass(BillingWrapper, [{
        key: 'createSession',
        value: function createSession(plan, provider) {
            return this._wrapPost('/billing/sessions', {
                plan: plan,
                provider: provider
            });
        }
    }, {
        key: 'getSession',
        value: function getSession(sessionId) {
            return this._wrapGet('/billing/sessions/' + sessionId);
        }
    }]);
    return BillingWrapper;
}(APIBaseWrapper);

var BlastFurnaceWrapper = function (_APIBaseWrapper) {
    inherits(BlastFurnaceWrapper, _APIBaseWrapper);

    function BlastFurnaceWrapper() {
        classCallCheck(this, BlastFurnaceWrapper);
        return possibleConstructorReturn(this, (BlastFurnaceWrapper.__proto__ || Object.getPrototypeOf(BlastFurnaceWrapper)).apply(this, arguments));
    }

    createClass(BlastFurnaceWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('blast-furnace');
        }
    }]);
    return BlastFurnaceWrapper;
}(APIBaseWrapper);

var DashboardWrapper = function (_APIBaseWrapper) {
    inherits(DashboardWrapper, _APIBaseWrapper);

    function DashboardWrapper() {
        classCallCheck(this, DashboardWrapper);
        return possibleConstructorReturn(this, (DashboardWrapper.__proto__ || Object.getPrototypeOf(DashboardWrapper)).apply(this, arguments));
    }

    createClass(DashboardWrapper, [{
        key: 'getDashboard',
        value: function getDashboard() {
            return this._wrapGet('/dashboard');
        }
    }]);
    return DashboardWrapper;
}(APIBaseWrapper);

var DecantPotionsWrapper = function (_APIBaseWrapper) {
    inherits(DecantPotionsWrapper, _APIBaseWrapper);

    function DecantPotionsWrapper() {
        classCallCheck(this, DecantPotionsWrapper);
        return possibleConstructorReturn(this, (DecantPotionsWrapper.__proto__ || Object.getPrototypeOf(DecantPotionsWrapper)).apply(this, arguments));
    }

    createClass(DecantPotionsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('decant-potions', opts));
        }
    }]);
    return DecantPotionsWrapper;
}(APIBaseWrapper);

var DeviceWrapper = function (_APIBaseWrapper) {
    inherits(DeviceWrapper, _APIBaseWrapper);

    function DeviceWrapper() {
        classCallCheck(this, DeviceWrapper);
        return possibleConstructorReturn(this, (DeviceWrapper.__proto__ || Object.getPrototypeOf(DeviceWrapper)).apply(this, arguments));
    }

    createClass(DeviceWrapper, [{
        key: 'register',

        /**
         * Register Device to a User
         *
         * Required fields:
         *      - platform
         *      - platformVersion
         *      - width
         *      - height
         *      - uniqueId
         *      - appVersion
         *
         * Optional fields:
         *
         *      - pushInfo.pushToken
         *      - pushInfo.userId
         *
         * @param platform
         * @param platformVersion
         * @param width
         * @param height
         * @param uniqueId
         * @param appVersion
         * @param pushInfo
         * @return {*}
         */
        value: function register(_ref) {
            var platform = _ref.platform,
                platformVersion = _ref.platformVersion,
                width = _ref.width,
                height = _ref.height,
                uniqueId = _ref.uniqueId,
                appVersion = _ref.appVersion,
                pushInfo = _ref.pushInfo;

            return this._wrapPost('devices/register', {
                platform: platform,
                platformVersion: platformVersion,
                width: width,
                height: height,
                uniqueId: uniqueId,
                appVersion: appVersion,
                pushInfo: pushInfo
            });
        }
    }]);
    return DeviceWrapper;
}(APIBaseWrapper);

var FavouriteItemsWrapper = function (_APIBaseWrapper) {
    inherits(FavouriteItemsWrapper, _APIBaseWrapper);

    function FavouriteItemsWrapper() {
        classCallCheck(this, FavouriteItemsWrapper);
        return possibleConstructorReturn(this, (FavouriteItemsWrapper.__proto__ || Object.getPrototypeOf(FavouriteItemsWrapper)).apply(this, arguments));
    }

    createClass(FavouriteItemsWrapper, [{
        key: 'addItem',
        value: function addItem(itemId) {
            return this._wrapPost('favourite-items', {
                item_id: itemId
            });
        }
    }, {
        key: 'deleteItem',
        value: function deleteItem(favouriteItemsId) {
            return this._wrapDelete('favourite-items/' + favouriteItemsId);
        }
    }, {
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('favourite-items', opts));
        }
    }]);
    return FavouriteItemsWrapper;
}(APIBaseWrapper);

var GELimitsWrapper = function (_APIBaseWrapper) {
    inherits(GELimitsWrapper, _APIBaseWrapper);

    function GELimitsWrapper() {
        classCallCheck(this, GELimitsWrapper);
        return possibleConstructorReturn(this, (GELimitsWrapper.__proto__ || Object.getPrototypeOf(GELimitsWrapper)).apply(this, arguments));
    }

    createClass(GELimitsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('ge-limits', opts));
        }
    }]);
    return GELimitsWrapper;
}(APIBaseWrapper);

var GraphWrapper = function (_APIBaseWrapper) {
    inherits(GraphWrapper, _APIBaseWrapper);

    function GraphWrapper() {
        classCallCheck(this, GraphWrapper);
        return possibleConstructorReturn(this, (GraphWrapper.__proto__ || Object.getPrototypeOf(GraphWrapper)).apply(this, arguments));
    }

    createClass(GraphWrapper, [{
        key: '_wrapGet',
        value: function _wrapGet(path) {
            return this.client.get(path).then(handleResponseBody);
        }
    }, {
        key: 'getDuration',
        value: function getDuration(duration, itemId) {
            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            var url = 'graph/' + itemId + '/' + duration;

            if (source !== null) {
                url = url + '?source=' + source;
            }

            return this._wrapGet(url);
        }
    }, {
        key: 'getDay',
        value: function getDay(itemId) {
            var tenMinute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            if (tenMinute) {

                var dateFormat = 'Y-MM-DD';
                var date = moment().format(dateFormat);

                var startDate = params.hasOwnProperty('start') ? moment(params.start).format(dateFormat) : date;
                var endDate = params.hasOwnProperty('end') ? moment(params.end).format(dateFormat) : date;

                var url = 'graph/' + itemId + '/day?day=10&duration[start]=' + startDate + '&duration[end]=' + endDate;

                if (params.hasOwnProperty('source') && params.source !== null) {
                    url = url + '&source=' + params.source;
                }

                return this._wrapGet(url);
            } else {

                var source = params.hasOwnProperty('source') && params.source !== null ? params.source : null;
                return this.getDuration('day', itemId, source);
            }
        }
    }, {
        key: 'getWeek',
        value: function getWeek(itemId) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return this.getDuration('week', itemId, source);
        }
    }, {
        key: 'getMonth',
        value: function getMonth(itemId) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return this.getDuration('month', itemId, source);
        }
    }, {
        key: 'getQuarter',
        value: function getQuarter(itemId) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return this.getDuration('quarter', itemId, source);
        }
    }, {
        key: 'getYear',
        value: function getYear(itemId) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            return this.getDuration('year', itemId, source);
        }
    }, {
        key: 'getCandlestick',
        value: function getCandlestick(duration, itemId) {
            return this._wrapGet('graph/candlestick/' + itemId + '/' + duration);
        }
    }, {
        key: 'forceReload',
        value: function forceReload(duration, itemId) {
            return this._wrapPost('graph/force-reload', {
                itemId: itemId,
                duration: duration
            });
        }
    }]);
    return GraphWrapper;
}(APIBaseWrapper);

var HeartbeatWrapper = function (_APIBaseWrapper) {
    inherits(HeartbeatWrapper, _APIBaseWrapper);

    function HeartbeatWrapper() {
        classCallCheck(this, HeartbeatWrapper);
        return possibleConstructorReturn(this, (HeartbeatWrapper.__proto__ || Object.getPrototypeOf(HeartbeatWrapper)).apply(this, arguments));
    }

    createClass(HeartbeatWrapper, [{
        key: 'getHeartbeat',
        value: function getHeartbeat() {
            return this._wrapGet('heartbeat');
        }
    }]);
    return HeartbeatWrapper;
}(APIBaseWrapper);

var HerbloreWrapper = function (_APIBaseWrapper) {
    inherits(HerbloreWrapper, _APIBaseWrapper);

    function HerbloreWrapper() {
        classCallCheck(this, HerbloreWrapper);
        return possibleConstructorReturn(this, (HerbloreWrapper.__proto__ || Object.getPrototypeOf(HerbloreWrapper)).apply(this, arguments));
    }

    createClass(HerbloreWrapper, [{
        key: 'getCleanHerbs',
        value: function getCleanHerbs() {
            return this._wrapGet('herblore/clean-herbs');
        }
    }, {
        key: 'getMakePotions',
        value: function getMakePotions() {
            return this._wrapGet('herblore/make-potions');
        }
    }, {
        key: 'getUnfinishedPotions',
        value: function getUnfinishedPotions() {
            return this._wrapGet('herblore/unfinished-potions');
        }
    }]);
    return HerbloreWrapper;
}(APIBaseWrapper);

var HighAlchemyWrapper = function (_APIBaseWrapper) {
    inherits(HighAlchemyWrapper, _APIBaseWrapper);

    function HighAlchemyWrapper() {
        classCallCheck(this, HighAlchemyWrapper);
        return possibleConstructorReturn(this, (HighAlchemyWrapper.__proto__ || Object.getPrototypeOf(HighAlchemyWrapper)).apply(this, arguments));
    }

    createClass(HighAlchemyWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('high-alchemy', opts));
        }
    }]);
    return HighAlchemyWrapper;
}(APIBaseWrapper);

var HighVolumeWrapper = function (_APIBaseWrapper) {
    inherits(HighVolumeWrapper, _APIBaseWrapper);

    function HighVolumeWrapper() {
        classCallCheck(this, HighVolumeWrapper);
        return possibleConstructorReturn(this, (HighVolumeWrapper.__proto__ || Object.getPrototypeOf(HighVolumeWrapper)).apply(this, arguments));
    }

    createClass(HighVolumeWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('high-volume', opts));
        }
    }]);
    return HighVolumeWrapper;
}(APIBaseWrapper);

var HighestMarginsWrapper = function (_APIBaseWrapper) {
    inherits(HighestMarginsWrapper, _APIBaseWrapper);

    function HighestMarginsWrapper() {
        classCallCheck(this, HighestMarginsWrapper);
        return possibleConstructorReturn(this, (HighestMarginsWrapper.__proto__ || Object.getPrototypeOf(HighestMarginsWrapper)).apply(this, arguments));
    }

    createClass(HighestMarginsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('highest-margins', opts));
        }
    }]);
    return HighestMarginsWrapper;
}(APIBaseWrapper);

var ItemSetsWrapper = function (_APIBaseWrapper) {
    inherits(ItemSetsWrapper, _APIBaseWrapper);

    function ItemSetsWrapper() {
        classCallCheck(this, ItemSetsWrapper);
        return possibleConstructorReturn(this, (ItemSetsWrapper.__proto__ || Object.getPrototypeOf(ItemSetsWrapper)).apply(this, arguments));
    }

    createClass(ItemSetsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('item-sets', opts));
        }
    }]);
    return ItemSetsWrapper;
}(APIBaseWrapper);

var ItemsWrapper = function (_APIBaseWrapper) {
    inherits(ItemsWrapper, _APIBaseWrapper);

    function ItemsWrapper() {
        classCallCheck(this, ItemsWrapper);
        return possibleConstructorReturn(this, (ItemsWrapper.__proto__ || Object.getPrototypeOf(ItemsWrapper)).apply(this, arguments));
    }

    createClass(ItemsWrapper, [{
        key: 'getAllItems',
        value: function getAllItems() {
            return this._wrapGet('items');
        }
    }, {
        key: 'getItem',
        value: function getItem(itemId) {
            var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var url = !detail ? 'items/' + itemId : 'items/' + itemId + '?detail=true';
            return this._wrapGet(url);
        }
    }, {
        key: 'getItems',
        value: function getItems() {
            for (var _len = arguments.length, itemIds = Array(_len), _key = 0; _key < _len; _key++) {
                itemIds[_key] = arguments[_key];
            }

            return this._wrapGet('items/multi/' + itemIds.join(','));
        }
    }, {
        key: 'search',
        value: function search(query) {
            return this._wrapGet('items/search/' + query);
        }
    }]);
    return ItemsWrapper;
}(APIBaseWrapper);

var LeaderboardWrapper = function (_APIBaseWrapper) {
    inherits(LeaderboardWrapper, _APIBaseWrapper);

    function LeaderboardWrapper() {
        classCallCheck(this, LeaderboardWrapper);
        return possibleConstructorReturn(this, (LeaderboardWrapper.__proto__ || Object.getPrototypeOf(LeaderboardWrapper)).apply(this, arguments));
    }

    createClass(LeaderboardWrapper, [{
        key: 'getLeaderboard',
        value: function getLeaderboard(slug) {
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this.client.get(this.parseOptions('leaderboard/' + slug, opts)).then(function (_ref) {
                var data = _ref.data;
                return data;
            });
        }
    }, {
        key: 'getSummary',
        value: function getSummary() {
            return this._wrapGet('leaderboard');
        }
    }]);
    return LeaderboardWrapper;
}(APIBaseWrapper);

var MagicTabletsWrapper = function (_APIBaseWrapper) {
    inherits(MagicTabletsWrapper, _APIBaseWrapper);

    function MagicTabletsWrapper() {
        classCallCheck(this, MagicTabletsWrapper);
        return possibleConstructorReturn(this, (MagicTabletsWrapper.__proto__ || Object.getPrototypeOf(MagicTabletsWrapper)).apply(this, arguments));
    }

    createClass(MagicTabletsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('magic-tablets');
        }
    }]);
    return MagicTabletsWrapper;
}(APIBaseWrapper);

var MarketWatchWrapper = function (_APIBaseWrapper) {
    inherits(MarketWatchWrapper, _APIBaseWrapper);

    function MarketWatchWrapper() {
        classCallCheck(this, MarketWatchWrapper);
        return possibleConstructorReturn(this, (MarketWatchWrapper.__proto__ || Object.getPrototypeOf(MarketWatchWrapper)).apply(this, arguments));
    }

    createClass(MarketWatchWrapper, [{
        key: 'getIndex',
        value: function getIndex(indexId) {
            return this._wrapGet('market-watch/' + indexId);
        }
    }, {
        key: 'getSummary',
        value: function getSummary() {
            return this._wrapGet('market-watch');
        }
    }]);
    return MarketWatchWrapper;
}(APIBaseWrapper);

var NewItemsWrapper = function (_APIBaseWrapper) {
    inherits(NewItemsWrapper, _APIBaseWrapper);

    function NewItemsWrapper() {
        classCallCheck(this, NewItemsWrapper);
        return possibleConstructorReturn(this, (NewItemsWrapper.__proto__ || Object.getPrototypeOf(NewItemsWrapper)).apply(this, arguments));
    }

    createClass(NewItemsWrapper, [{
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('new-items', opts));
        }
    }]);
    return NewItemsWrapper;
}(APIBaseWrapper);

var NotificationsWrapper = function (_APIBaseWrapper) {
    inherits(NotificationsWrapper, _APIBaseWrapper);

    function NotificationsWrapper() {
        classCallCheck(this, NotificationsWrapper);
        return possibleConstructorReturn(this, (NotificationsWrapper.__proto__ || Object.getPrototypeOf(NotificationsWrapper)).apply(this, arguments));
    }

    createClass(NotificationsWrapper, [{
        key: 'getNotifications',
        value: function getNotifications() {
            return this._wrapGet('notifications');
        }
    }, {
        key: 'getNotification',
        value: function getNotification(notificationId) {
            return this._wrapGet('notifications/' + notificationId);
        }
    }, {
        key: 'markAllAsRead',
        value: function markAllAsRead() {
            return this._wrapPost('notifications/mark-read');
        }
    }]);
    return NotificationsWrapper;
}(APIBaseWrapper);

var PriceAlertWrapper = function (_APIBaseWrapper) {
    inherits(PriceAlertWrapper, _APIBaseWrapper);

    function PriceAlertWrapper() {
        classCallCheck(this, PriceAlertWrapper);
        return possibleConstructorReturn(this, (PriceAlertWrapper.__proto__ || Object.getPrototypeOf(PriceAlertWrapper)).apply(this, arguments));
    }

    createClass(PriceAlertWrapper, [{
        key: 'getAlerts',

        /**
         * Get Price Alerts
         *
         * `itemId` can be specified to load price alerts for a single item
         *
         * @param itemId
         * @return {*}
         */
        value: function getAlerts() {
            var itemId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            var url = itemId ? '/price-alerts/' + itemId : '/price-alerts';
            return this._wrapGet(url);
        }

        /**
         * Create Price Alert
         *
         * `field` should be one of: [current, selling, buying, profit]
         * `type` should be one of: [above, below]
         * (optional) `methods` should be an object in the format: `{sms: true, email: true}`
         *
         * @param itemId
         * @param field
         * @param type
         * @param price
         * @param methods
         * @return {*}
         */

    }, {
        key: 'createAlert',
        value: function createAlert(itemId, field, type, price) {
            var methods = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

            return this._wrapPost('/price-alerts', {
                itemId: itemId,
                field: field,
                type: type,
                price: price,
                methods: methods
            });
        }
    }, {
        key: 'updateAlert',
        value: function updateAlert(id) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            return this._wrapPost('/price-alerts/' + id, _extends({
                status: status
            }, params));
        }
    }, {
        key: 'deleteAlert',
        value: function deleteAlert(id) {
            return this._wrapDelete('/price-alerts/' + id);
        }
    }]);
    return PriceAlertWrapper;
}(APIBaseWrapper);

var ProfitTrackerWrapper = function (_APIBaseWrapper) {
    inherits(ProfitTrackerWrapper, _APIBaseWrapper);

    function ProfitTrackerWrapper() {
        classCallCheck(this, ProfitTrackerWrapper);
        return possibleConstructorReturn(this, (ProfitTrackerWrapper.__proto__ || Object.getPrototypeOf(ProfitTrackerWrapper)).apply(this, arguments));
    }

    createClass(ProfitTrackerWrapper, [{
        key: 'getTransactions',
        value: function getTransactions() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('/profit-tracker', opts)).then(function (_ref) {
                var data = _ref.data;
                return data;
            });
        }
    }, {
        key: 'getTransaction',
        value: function getTransaction(id) {
            return this._wrapGet('/profit-tracker/' + id);
        }
    }, {
        key: 'createTransaction',
        value: function createTransaction(itemId, qty, buyPrice) {
            var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

            return this._wrapPost('/profit-tracker', _extends({
                item_id: itemId,
                qty: qty,
                buy_price: buyPrice
            }, params));
        }
    }, {
        key: 'updateTransaction',
        value: function updateTransaction(id, status) {
            var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            return this._wrapPost('/profit-tracker/' + id, _extends({
                status: status
            }, params));
        }
    }, {
        key: 'deleteTransaction',
        value: function deleteTransaction(id) {
            return this._wrapDelete('/profit-tracker/' + id);
        }
    }, {
        key: 'getBuyingTransactions',
        value: function getBuyingTransactions() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('/profit-tracker/buying', opts)).then(function (_ref2) {
                var data = _ref2.data;
                return data;
            });
        }
    }, {
        key: 'getBoughtTransactions',
        value: function getBoughtTransactions() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('/profit-tracker/bought', opts)).then(function (_ref3) {
                var data = _ref3.data;
                return data;
            });
        }
    }, {
        key: 'getSellingTransactions',
        value: function getSellingTransactions() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('/profit-tracker/selling', opts)).then(function (_ref4) {
                var data = _ref4.data;
                return data;
            });
        }
    }, {
        key: 'getSoldTransactions',
        value: function getSoldTransactions() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('/profit-tracker/sold', opts)).then(function (_ref5) {
                var data = _ref5.data;
                return data;
            });
        }
    }, {
        key: 'getActiveTransactions',
        value: function getActiveTransactions() {
            return this._wrapGet('/profit-tracker/active-transactions');
        }
    }, {
        key: 'getPreviousTransactions',
        value: function getPreviousTransactions(itemId) {
            return this._wrapGet('/profit-tracker/previous-transactions/' + itemId);
        }
    }, {
        key: 'getSummary',
        value: function getSummary() {
            return this._wrapGet('/profit-tracker/summary');
        }
    }, {
        key: 'getMostProfitable',
        value: function getMostProfitable() {
            return this._wrapGet('/profit-tracker/most-profitable');
        }
    }, {
        key: 'clear',
        value: function clear() {
            return this._wrapPost('/profit-tracker/clear');
        }
    }]);
    return ProfitTrackerWrapper;
}(APIBaseWrapper);

var PlankMakingWrapper = function (_APIBaseWrapper) {
    inherits(PlankMakingWrapper, _APIBaseWrapper);

    function PlankMakingWrapper() {
        classCallCheck(this, PlankMakingWrapper);
        return possibleConstructorReturn(this, (PlankMakingWrapper.__proto__ || Object.getPrototypeOf(PlankMakingWrapper)).apply(this, arguments));
    }

    createClass(PlankMakingWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('plank-making');
        }
    }]);
    return PlankMakingWrapper;
}(APIBaseWrapper);

var RSUpdatesWrapper = function (_APIBaseWrapper) {
    inherits(RSUpdatesWrapper, _APIBaseWrapper);

    function RSUpdatesWrapper() {
        classCallCheck(this, RSUpdatesWrapper);
        return possibleConstructorReturn(this, (RSUpdatesWrapper.__proto__ || Object.getPrototypeOf(RSUpdatesWrapper)).apply(this, arguments));
    }

    createClass(RSUpdatesWrapper, [{
        key: 'get',
        value: function get$$1() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            return this.client.get(this.parseOptions('rs-updates', opts)).then(function (_ref) {
                var data = _ref.data;
                return data;
            });
        }
    }, {
        key: 'getUpdate',
        value: function getUpdate(id) {
            return this._wrapGet('rs-updates/' + id);
        }
    }]);
    return RSUpdatesWrapper;
}(APIBaseWrapper);

var StatsWrapper = function (_APIBaseWrapper) {
    inherits(StatsWrapper, _APIBaseWrapper);

    function StatsWrapper() {
        classCallCheck(this, StatsWrapper);
        return possibleConstructorReturn(this, (StatsWrapper.__proto__ || Object.getPrototypeOf(StatsWrapper)).apply(this, arguments));
    }

    createClass(StatsWrapper, [{
        key: 'getGlobalStats',
        value: function getGlobalStats() {
            return this._wrapGet('stats');
        }
    }, {
        key: 'getOnlineUsers',
        value: function getOnlineUsers() {
            return this._wrapGet('stats/online');
        }
    }]);
    return StatsWrapper;
}(APIBaseWrapper);

var StoreProfitWrapper = function (_APIBaseWrapper) {
    inherits(StoreProfitWrapper, _APIBaseWrapper);

    function StoreProfitWrapper() {
        classCallCheck(this, StoreProfitWrapper);
        return possibleConstructorReturn(this, (StoreProfitWrapper.__proto__ || Object.getPrototypeOf(StoreProfitWrapper)).apply(this, arguments));
    }

    createClass(StoreProfitWrapper, [{
        key: 'getStores',
        value: function getStores() {
            return this._wrapGet('stores');
        }
    }, {
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('stores/profit');
        }
    }]);
    return StoreProfitWrapper;
}(APIBaseWrapper);

var SubscriptionsWrapper = function (_APIBaseWrapper) {
    inherits(SubscriptionsWrapper, _APIBaseWrapper);

    function SubscriptionsWrapper() {
        classCallCheck(this, SubscriptionsWrapper);
        return possibleConstructorReturn(this, (SubscriptionsWrapper.__proto__ || Object.getPrototypeOf(SubscriptionsWrapper)).apply(this, arguments));
    }

    createClass(SubscriptionsWrapper, [{
        key: 'getSubscription',
        value: function getSubscription(subscriptionId) {
            return this._wrapGet('/subscriptions/' + subscriptionId);
        }
    }, {
        key: 'getUserSubscriptions',
        value: function getUserSubscriptions(userId) {
            return this._wrapGet('/subscriptions/user/' + userId);
        }
    }, {
        key: 'terminateSubscription',
        value: function terminateSubscription(subscriptionId) {
            return this._wrapDelete('/subscriptions/' + subscriptionId);
        }
    }, {
        key: 'createSubscription',
        value: function createSubscription(transactionReceipt, platform) {
            var sessionId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

            return this._wrapPost('/subscriptions', {
                transactionReceipt: transactionReceipt,
                platform: platform,
                sessionId: sessionId
            });
        }
    }]);
    return SubscriptionsWrapper;
}(APIBaseWrapper);

var SuggestedItemsWrapper = function (_APIBaseWrapper) {
    inherits(SuggestedItemsWrapper, _APIBaseWrapper);

    function SuggestedItemsWrapper() {
        classCallCheck(this, SuggestedItemsWrapper);
        return possibleConstructorReturn(this, (SuggestedItemsWrapper.__proto__ || Object.getPrototypeOf(SuggestedItemsWrapper)).apply(this, arguments));
    }

    createClass(SuggestedItemsWrapper, [{
        key: 'refresh',
        value: function refresh() {
            return this._wrapGet('suggested-items/refresh');
        }
    }, {
        key: 'getItems',
        value: function getItems() {
            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { filters: false };

            return this._wrapGet(this.parseOptions('suggested-items', opts));
        }
    }]);
    return SuggestedItemsWrapper;
}(APIBaseWrapper);

var TanLeatherWrapper = function (_APIBaseWrapper) {
    inherits(TanLeatherWrapper, _APIBaseWrapper);

    function TanLeatherWrapper() {
        classCallCheck(this, TanLeatherWrapper);
        return possibleConstructorReturn(this, (TanLeatherWrapper.__proto__ || Object.getPrototypeOf(TanLeatherWrapper)).apply(this, arguments));
    }

    createClass(TanLeatherWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('tan-leather');
        }
    }]);
    return TanLeatherWrapper;
}(APIBaseWrapper);

var TreeSaplingWrapper = function (_APIBaseWrapper) {
    inherits(TreeSaplingWrapper, _APIBaseWrapper);

    function TreeSaplingWrapper() {
        classCallCheck(this, TreeSaplingWrapper);
        return possibleConstructorReturn(this, (TreeSaplingWrapper.__proto__ || Object.getPrototypeOf(TreeSaplingWrapper)).apply(this, arguments));
    }

    createClass(TreeSaplingWrapper, [{
        key: 'getItems',
        value: function getItems() {
            return this._wrapGet('tree-sapling');
        }
    }]);
    return TreeSaplingWrapper;
}(APIBaseWrapper);

var UserWrapper = function (_APIBaseWrapper) {
    inherits(UserWrapper, _APIBaseWrapper);

    function UserWrapper() {
        classCallCheck(this, UserWrapper);
        return possibleConstructorReturn(this, (UserWrapper.__proto__ || Object.getPrototypeOf(UserWrapper)).apply(this, arguments));
    }

    createClass(UserWrapper, [{
        key: 'getById',
        value: function getById(userId) {
            return this._wrapGet('users/' + userId);
        }
    }, {
        key: 'search',
        value: function search(query) {
            return this._wrapPost('users/search', {
                query: query
            });
        }
    }, {
        key: 'getAuthenticateUser',
        value: function getAuthenticateUser() {
            return this._wrapGet('users/me');
        }
    }]);
    return UserWrapper;
}(APIBaseWrapper);

var createApi = function createApi(client) {
    var bugsnag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    return {
        APIUptime: new APIUptimeWrapper(client, bugsnag),
        Auth: new AuthWrapper(client, bugsnag),
        BarrowsRepair: new BarrowsRepairWrapper(client, bugsnag),
        Billing: new BillingWrapper(client, bugsnag),
        BlastFurnace: new BlastFurnaceWrapper(client, bugsnag),
        Dashboard: new DashboardWrapper(client, bugsnag),
        DecantPotions: new DecantPotionsWrapper(client, bugsnag),
        Device: new DeviceWrapper(client, bugsnag),
        FavouriteItems: new FavouriteItemsWrapper(client, bugsnag),
        GELimits: new GELimitsWrapper(client, bugsnag),
        Graphs: new GraphWrapper(client, bugsnag),
        Heartbeat: new HeartbeatWrapper(client, bugsnag),
        Herblore: new HerbloreWrapper(client, bugsnag),
        HighAlchemy: new HighAlchemyWrapper(client, bugsnag),
        HighVolume: new HighVolumeWrapper(client, bugsnag),
        HighestMargins: new HighestMarginsWrapper(client, bugsnag),
        ItemSets: new ItemSetsWrapper(client, bugsnag),
        Items: new ItemsWrapper(client, bugsnag),
        Leaderboard: new LeaderboardWrapper(client, bugsnag),
        MagicTablets: new MagicTabletsWrapper(client, bugsnag),
        MarketWatch: new MarketWatchWrapper(client, bugsnag),
        NewItems: new NewItemsWrapper(client, bugsnag),
        Notifications: new NotificationsWrapper(client, bugsnag),
        PriceAlert: new PriceAlertWrapper(client, bugsnag),
        ProfitTracker: new ProfitTrackerWrapper(client, bugsnag),
        PlankMaking: new PlankMakingWrapper(client, bugsnag),
        RSUpdates: new RSUpdatesWrapper(client, bugsnag),
        Stats: new StatsWrapper(client, bugsnag),
        StoreProfit: new StoreProfitWrapper(client, bugsnag),
        Subscriptions: new SubscriptionsWrapper(client, bugsnag),
        SuggestedItems: new SuggestedItemsWrapper(client, bugsnag),
        TanLeather: new TanLeatherWrapper(client, bugsnag),
        TreeSapling: new TreeSaplingWrapper(client, bugsnag),
        Users: new UserWrapper(client, bugsnag),

        /**
         * Get GT App Manifest JSON
         *
         * @param url
         * @return {Promise<any>}
         */
        getManifest: function getManifest() {

            var apiUrl = client.defaults.baseURL.replace('/api', '');
            return new Promise(function (resolve, reject) {
                client.get(apiUrl + 'app_manifest.json').then(function (data) {

                    if (data.hasOwnProperty('data')) {
                        resolve(data.data);
                    } else {
                        reject(null);
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }
    };
};

function captureStackTrace(targetObject) {
    var constructorOpt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    if (Error.captureStackTrace) {
        Error.captureStackTrace(targetObject, constructorOpt);
    }
}

var InvalidApiKey = function (_Error) {
    inherits(InvalidApiKey, _Error);

    function InvalidApiKey() {
        classCallCheck(this, InvalidApiKey);

        var _this = possibleConstructorReturn(this, (InvalidApiKey.__proto__ || Object.getPrototypeOf(InvalidApiKey)).call(this, 'Specified API key was missing or invalid'));

        captureStackTrace(_this, InvalidApiKey);
        return _this;
    }

    return InvalidApiKey;
}(Error);

var GE_TRACKER_API_URL = 'https://www.ge-tracker.com/api';
var GE_TRACKER_API_VERSION = 'v2';

var DefaultOptions = {
    // set the base URL for all API calls made on this Axios instance
    baseURL: GE_TRACKER_API_URL,

    // set a sane default for the request TTL
    timeout: 30e3,

    // disable redirects -- API should NOT return a redirect response
    maxRedirects: 0,

    // explicitly set the default response type to JSON
    responseType: 'json',

    // specify a custom user-agent header to identify the client used
    // and for a point of contact
    headers: {
        'User-Agent': 'ge-tracker-api client <https://github.com/gtjamesa/ge-tracker-api>',
        'Accept': 'application/x.getracker.' + GE_TRACKER_API_VERSION + '+json'
    }
};

function isUnauthorizedResponse(error) {
    return error.response && error.response.status === 401;
}

function createAuthHeader(apiKey) {
    return {
        // Authorization header is required with a valid API key for all API calls
        Authorization: 'Bearer ' + apiKey
    };
}

function createClient(apiKey) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var options = merge(DefaultOptions, opts || {});
    var instance = Axios.create(merge(options, { headers: createAuthHeader(apiKey) }));

    // add custom response interceptors
    instance.interceptors.response.use(function (response) {
        return response;
    }, function (error) {
        // intercept 401 Unauthorized responses and reject the promise chain with
        // an appropriate typed error
        if (isUnauthorizedResponse(error)) {
            return Promise.reject(new InvalidApiKey());
        }
        return Promise.reject(error);
    });

    return instance;
}

function getApiKeyFromEnv() {
    return process.env.GE_TRACKER_API_KEY;
}

var createInstance = function createInstance(apiKey) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var bugsnag = opts.hasOwnProperty('bugsnag') ? opts.bugsnag : null;
    return createApi(createClient(apiKey, opts), bugsnag);
};

var createClient$1 = function createClient$$1(apiKey) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return createInstance(apiKey, opts);
};
var createClientFromEnv = function createClientFromEnv() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return createInstance(getApiKeyFromEnv(), opts);
};

exports.createClient = createClient$1;
exports.createClientFromEnv = createClientFromEnv;
